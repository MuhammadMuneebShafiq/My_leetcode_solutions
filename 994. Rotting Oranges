class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        from collections import deque



        n = len(grid)
        m = len(grid[0])
        visited = [[0]*m for _ in range(n)]
        self.mi = 0

        dq = deque()
        for u in range(n):
            for v in range(m):
                if grid[u][v] == 2:
                    dq.append([u,v])


        def bfs(dq):
            #global mi  


            while dq:
                flag = False
                for _ in range(len(dq)):
                    cur = dq.popleft()
                    x, y = cur[0], cur[1]
                    visited[x][y] = 1
                    for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                        nx, ny = x + dx, y + dy
                        if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 1 and visited[nx][ny] == 0:
                            flag = True
                            visited[nx][ny] = 1
                            grid[nx][ny] = 2
                            dq.append((nx, ny))
                if flag:
                    self.mi += 1

        bfs(dq)


        for u in range(n):
            for v in range(m):
                if grid[u][v] == 1:
                    return (-1)

        return (self.mi)

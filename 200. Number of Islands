class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        from collections import deque
        n = len(grid)
        m = len(grid[0])
        visited = [[0]*m for _ in range(n)]
        count = 0

        def bfs(i,j):
            dq = deque()
            dq.append((i,j))

            visited[i][j] = 1
            while dq:
                cur = dq.popleft()

                x  , y = cur[0], cur[1]
                for dx , dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:
                    nx , ny = x+dx , y+dy
                    if (nx >= 0 and nx <= n-1) and (ny >= 0 and ny <= m-1) and grid[nx][ny] == '1' and visited[nx][ny] == 0:
                        dq.append((nx,ny))
                        visited[nx][ny] = 1
        for u in range(n):
            for v in range(m):
                if grid[u][v] == '1' and visited[u][v] == 0:
                    bfs(u,v)
                    count += 1

        return (count)
